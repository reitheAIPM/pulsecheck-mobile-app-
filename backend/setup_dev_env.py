#!/usr/bin/env python3
"""
PulseCheck Development Environment Setup Script
Helps configure .env file and test API connections
"""

import os
import secrets
import sys
from pathlib import Path

def generate_secret_key():
    """Generate a secure secret key for JWT tokens"""
    return secrets.token_urlsafe(32)

def create_env_file():
    """Create .env file with placeholder values"""
    env_content = f"""# PulseCheck Development Environment Configuration
# Generated by setup_dev_env.py

# Supabase Configuration
# Get these from: https://supabase.com/dashboard > Your Project > Settings > API
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_KEY=your-service-role-key-here

# OpenAI Configuration
# Get this from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# JWT Configuration (Auto-generated secure key)
SECRET_KEY={generate_secret_key()}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:19006

# Environment
ENVIRONMENT=development
"""
    
    env_path = Path(".env")
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Keeping existing .env file")
            return False
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Created .env file with secure JWT secret key")
    print("üìù Please update the placeholder values with your actual API keys")
    return True

def test_imports():
    """Test that all required packages are installed"""
    try:
        import fastapi
        import uvicorn
        import openai
        import supabase
        import pydantic
        print("‚úÖ All required packages are installed")
        return True
    except ImportError as e:
        print(f"‚ùå Missing package: {e}")
        print("Run: pip install -r requirements.txt")
        return False

def print_next_steps():
    """Print next steps for setup"""
    print("\nüöÄ Next Steps:")
    print("1. Set up Supabase project:")
    print("   - Go to https://supabase.com")
    print("   - Create new project")
    print("   - Run SQL schema from SUPABASE_SETUP.md")
    print("   - Copy URL and API keys to .env file")
    print("")
    print("2. Get OpenAI API key:")
    print("   - Go to https://platform.openai.com/api-keys")
    print("   - Create new API key")
    print("   - Add to .env file")
    print("")
    print("3. Test the backend:")
    print("   - Run: python main.py")
    print("   - Visit: http://localhost:8000/docs")
    print("")
    print("4. Test the frontend:")
    print("   - cd ../frontend")
    print("   - npx expo start")

def main():
    print("üîß PulseCheck Development Environment Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path("main.py").exists():
        print("‚ùå Please run this script from the backend directory")
        sys.exit(1)
    
    # Test imports
    if not test_imports():
        sys.exit(1)
    
    # Create .env file
    create_env_file()
    
    # Print next steps
    print_next_steps()
    
    print("\n‚ú® Setup complete! Follow the next steps to configure your API keys.")

if __name__ == "__main__":
    main() 