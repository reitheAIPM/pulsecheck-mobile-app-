# 🛡️ PulseCheck Pitfall Audit & Remediation Task List (For Claude AI)

This document outlines system-level issues discovered or anticipated in the PulseCheck journaling app architecture. Claude should help identify, patch, or prevent any security, privacy, or user experience pitfalls listed here. All solutions must be applied with multi-user isolation, personalized AI context, and long-term data integrity in mind.

---

## 🔥 **URGENT: Current Production Issues (January 27, 2025)**

### **❌ Frontend Journal Entry Creation Failed**
**Status**: CRITICAL - Journal entries cannot be saved
**Error**: 404 Not Found on `/api/v1/journal/entries` and `/api/v1/journal/ai/topic-classification`
**Impact**: Users cannot create journal entries - core functionality broken

**Root Cause Analysis**:
- ✅ Backend health endpoint working (200 OK)
- ❌ Journal router endpoints returning 404
- ❌ Topic classification endpoint missing
- **Likely Issue**: Router deployment/import problem

**Immediate Actions Required**:
1. ⏳ **Deploy latest backend code** - journal router may not be properly deployed
2. ⏳ **Verify router imports** in main.py are correctly configured
3. ⏳ **Test authentication dependencies** - get_current_user imports may be broken
4. ⏳ **Check Railway deployment logs** for import errors

**Console Error Details**:
```
POST /api/v1/journal/ai/topic-classification 404 (Not Found)
POST /api/v1/journal/entries 404 (Not Found)
Frontend tried: "Really wish I could take a vacation but we don't have enough money."
```

---

## 🔐 1. User-Specific Data Isolation (RLS)

**Problem**: Journal entries were visible across all users  
**Task**:
- ✅ Apply Supabase RLS (`user_id = auth.uid()`) to `journal`, `profiles`, `ai_logs`, and any AI tracking tables
- ✅ Ensure RLS is enforced for **INSERT**, **SELECT**, **UPDATE**, and **DELETE**

---

## 🧾 2. Journal Insert Logic

**Problem**: Journal entries not tied to specific user IDs  
**Task**:
- ✅ Confirm journal inserts always pass `user_id: session.user.id`
- ✅ Reject inserts missing authenticated context
- ✅ Unit test insertion with and without auth

---

## 🔍 3. Secure Fetch Logic (Frontend)

**Problem**: Frontend may be fetching journal entries globally  
**Task**:
- ✅ Rewrite queries as `from journal where user_id == current_user.id`
- ✅ Add defensive filter even if RLS is in place
- ✅ Test with 2 separate accounts to confirm data isolation

---

## 🔄 4. Session Expiry & Stale Tokens

**Problem**: Supabase sessions can expire or desync  
**Task**:
- ✅ Use `supabase.auth.onAuthStateChange` to detect expired logins
- ✅ Automatically refresh or redirect to login
- ✅ Prevent journaling in unauthenticated state

---

## 📦 5. React/Client-Side State Bleed

**Problem**: Cached data might persist across sessions  
**Task**:
- ✅ Key client-side caches (SWR, React Query, Zustand) by `user_id`
- ✅ Wipe cache on logout
- ✅ Prevent session crossover when switching accounts on the same device

---

## 🔐 6. AI Logs & Prompt Privacy

**Problem**: Logs may leak AI interactions across users  
**Task**:
- ✅ Add RLS to all logs/tables related to AI inputs and outputs
- ✅ Include `user_id` in logs and debug records
- ✅ Avoid storing full prompts unencrypted unless required

---

## 🔑 7. OAuth Account Collisions

**Problem**: Users may create two accounts with the same email (e.g. Google + email/pw)  
**Task**:
- ✅ Track linked login methods with `user_metadata`
- ✅ Detect and alert on duplicate emails
- ✅ Plan optional account linking feature

---

## 🧠 8. Global AI Context Leakage

**Problem**: Shared memory or cache could mix up journal tone across users  
**Task**:
- ✅ Key AI prompt context per user
- ✅ Scope summarization or embedding results individually
- ✅ Never reuse prompt memory across users

---

## 🛠 9. **Updated Testing Status (January 27, 2025)**

**❌ CRITICAL ISSUES DISCOVERED**:
- **❌ Journal Entry Creation**: Frontend 404 errors prevent journal saving
- **❌ Topic Classification API**: Missing endpoint causing frontend errors
- **❌ Router Deployment**: Backend routers may not be properly deployed

**✅ COMPLETED TESTS**:
- ✅ RLS Isolation Test: simulate 2 users → attempt cross-view
- ✅ Frontend QA Script: run through login, journal, logout → swap users
- ✅ Admin Audit Tool: detect journals without `user_id`, or AI logs missing auth context

**⏳ IMMEDIATE FIXES NEEDED**:
- ⏳ **Backend Deployment**: Deploy latest journal router with fixed endpoints
- ⏳ **API Endpoint Verification**: Test all journal endpoints return 200 OK
- ⏳ **Frontend Error Handling**: Add better error messages for API failures

---

## 📤 10. Optional Enhancements

- 📌 Encrypt stored journal data with per-user key
- 📌 Show journal entry "ownership" in dev UI
- 📌 Add audit log for admin to trace AI requests per user

---

Claude should prioritize this task list immediately before onboarding additional beta testers or connecting AI analysis to live user journaling data.

---

# 🔍 Additional System Pitfalls & Claude Mitigation Tasks

This section expands on deeper architectural, AI, UX, privacy, and scaling challenges Claude should proactively detect, patch, or flag as PulseCheck moves toward beta and public use.

---

## 🧱 1. Multi-Platform & Offline Pitfalls

- ✅ Ensure journal entries created offline are cached and synced post-login
- ✅ Do not assume connectivity—provide offline feedback (e.g. "Saved locally")
- ✅ Sync discrepancies across web/mobile should be auto-resolved or flagged

---

## 🔐 2. Privacy, Encryption & Crisis Detection

- ✅ Detect and redact potential crisis content, hate speech, or self-harm flags
- ✅ Respond to crisis topics with grounded tone + links to real-world help
- ✅ Optional: Encrypt journal entries on the client before Supabase insert
- ✅ Disclose AI privacy policy clearly — especially regarding training data

---

## 🤖 3. AI Misuse, Cost, and Framing Pitfalls

- ✅ Trim or summarize entries over 2K tokens before AI request
- ✅ Add daily AI quota per user tier + fallback to emoji-only
- ✅ Never state "You always…" in AI tone — use reflective language like "You might notice..."
- ✅ Track average token use per persona type and prompt category

---

## 💥 4. UX Edge Case Handling

- ✅ Block or warn on voice journaling without microphone permission
- ✅ Maintain entry order via ISO timestamp, not insertion ID
- **❌ CRITICAL**: Prevent journaling before login from being discarded ← **CURRENTLY FAILING**

---

## 📊 5. Analytics + Admin QA

- ✅ Track prompt type (`emoji`, `deep`, `followup`, `summary`, `persona_spark`, etc.)
- ✅ Flag internal testers in Supabase (`is_test_user = true`)
- ✅ Exclude these users from dashboards, alerts, and retention metrics

---

## 📤 6. Long-Term Scale + AI Context Drift

- ✅ Apply decay rules to long-term user memory (summarize > store raw)
- ✅ Never mix memory/context across users or prompt templates
- ✅ Compress long-term tone indicators and journal clusters per user

```json
"user_memory": {
  "frequent_moods": ["anxiety", "loneliness"],
  "themes": { "work": 4, "sleep": 2 },
  "persona_pref": "Anchor"
}
```

Claude should maintain this over time.

---

## ⚡ **IMMEDIATE ACTION ITEMS (January 27, 2025)**

### **🔥 P0 - Critical (Fix Today)**
1. **❌ Deploy backend fixes** - Journal router 404 errors
2. **❌ Test journal entry creation** - Core functionality broken
3. **❌ Verify topic classification endpoint** - Frontend dependency missing

### **🟡 P1 - High Priority (This Week)**
1. **⏳ Enhanced error handling** - Better frontend error messages
2. **⏳ Authentication flow testing** - End-to-end user session validation
3. **⏳ Deployment verification** - All endpoints return expected responses

### **🟢 P2 - Medium Priority (Next Sprint)**
1. **📋 Beta user testing** - Test with real users after P0 fixes
2. **📋 Performance monitoring** - Add metrics for API response times
3. **📋 Enhanced logging** - Better debugging for production issues

**Next Update**: After critical deployment issues are resolved
