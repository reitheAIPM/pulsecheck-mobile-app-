import os
import tiktoken

# Set your repo path here
REPO_PATH = "/path/to/your/pulsecheck-mobile-app"

# File extensions to include
INCLUDE_EXTENSIONS = {'.js', '.ts', '.tsx', '.py', '.json', '.md', '.txt', '.html', '.css', '.yaml', '.yml'}

# Token encoder (using OpenAI's cl100k_base for GPT-4/Claude estimation)
encoding = tiktoken.get_encoding("cl100k_base")

def estimate_tokens(text):
    return len(encoding.encode(text))

total_tokens = 0
file_token_counts = []

for root, dirs, files in os.walk(REPO_PATH):
    for file in files:
        ext = os.path.splitext(file)[1]
        if ext.lower() in INCLUDE_EXTENSIONS:
            try:
                file_path = os.path.join(root, file)
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                    tokens = estimate_tokens(contents)
                    total_tokens += tokens
                    file_token_counts.append((file_path, tokens))
            except Exception as e:
                print(f"Skipped {file_path}: {e}")

# Output
print(f"\nðŸ”¢ Estimated Total Token Count: {total_tokens:,} tokens")
print("\nðŸ“„ Top Largest Files:")
for file_path, tokens in sorted(file_token_counts, key=lambda x: x[1], reverse=True)[:10]:
    print(f"{file_path}: {tokens:,} tokens")

# Optional cost estimation (Claude Sonnet)
token_input_cost = 0.000003  # $3.00 / 1M input tokens
token_output_cost = 0.000015  # $15.00 / 1M output tokens
estimated_cost = total_tokens * (token_input_cost + token_output_cost)

print(f"\nðŸ’° Estimated Cost to Process with Claude 3 Sonnet: ${estimated_cost:.2f}")
